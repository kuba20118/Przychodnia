// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Przychodnia.API;

namespace Przychodnia.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200319113737_database")]
    partial class database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Przychodnia.API.Absence", b =>
                {
                    b.Property<int>("IdAbsence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idAbsence")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.HasKey("IdAbsence")
                        .HasName("PRIMARY");

                    b.ToTable("absence");
                });

            modelBuilder.Entity("Przychodnia.API.Day", b =>
                {
                    b.Property<int>("IdDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idDay")
                        .HasColumnType("int(11)");

                    b.Property<TimeSpan?>("FromTime")
                        .HasColumnType("time");

                    b.Property<int>("IdWs")
                        .HasColumnName("idWS")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdWsuser")
                        .HasColumnName("idWSUser")
                        .HasColumnType("int(11)");

                    b.Property<TimeSpan?>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("IdDay")
                        .HasName("PRIMARY");

                    b.HasIndex("IdWs")
                        .HasName("idWS_idx");

                    b.HasIndex("IdWsuser")
                        .HasName("idWSUser_idx");

                    b.ToTable("day");
                });

            modelBuilder.Entity("Przychodnia.API.Employment", b =>
                {
                    b.Property<int>("IdEmployment")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idEmployment")
                        .HasColumnType("int(11)");

                    b.Property<sbyte?>("CurrentyEmployed")
                        .HasColumnType("tinyint(4)");

                    b.Property<DateTime?>("FireDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date");

                    b.Property<int?>("WorkingHours")
                        .HasColumnType("int(11)");

                    b.HasKey("IdEmployment")
                        .HasName("PRIMARY");

                    b.ToTable("employment");
                });

            modelBuilder.Entity("Przychodnia.API.Leftvacationdays", b =>
                {
                    b.Property<int>("IdlLeftVacationDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idlLeftVacationDays")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdAbsence")
                        .HasColumnName("idAbsence")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdUser")
                        .HasColumnName("idUser")
                        .HasColumnType("int(11)");

                    b.Property<int?>("LeftDays")
                        .HasColumnType("int(11)");

                    b.HasKey("IdlLeftVacationDays")
                        .HasName("PRIMARY");

                    b.HasIndex("IdAbsence")
                        .HasName("isAbsence_idx");

                    b.HasIndex("IdUser")
                        .HasName("idUser_idx");

                    b.ToTable("leftvacationdays");
                });

            modelBuilder.Entity("Przychodnia.API.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idRole")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.HasKey("IdRole")
                        .HasName("PRIMARY");

                    b.ToTable("role");
                });

            modelBuilder.Entity("Przychodnia.API.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idUser")
                        .HasColumnType("int(11)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<byte[]>("Hash")
                        .HasColumnType("blob");

                    b.Property<int>("IdEmpl")
                        .HasColumnName("idEmpl")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdRole")
                        .HasColumnName("idRole")
                        .HasColumnType("int(11)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<string>("Mail")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("blob");

                    b.HasKey("IdUser")
                        .HasName("PRIMARY");

                    b.HasIndex("IdEmpl")
                        .HasName("idEmpl_idx");

                    b.HasIndex("IdRole")
                        .HasName("idRole_idx");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Przychodnia.API.Vacation", b =>
                {
                    b.Property<int>("IdVacation")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idVacation")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("date");

                    b.Property<int?>("IdAbsenceVac")
                        .HasColumnName("idAbsenceVac")
                        .HasColumnType("int(11)");

                    b.Property<int?>("IdUserVac")
                        .HasColumnName("idUserVac")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("IdVacation")
                        .HasName("PRIMARY");

                    b.HasIndex("IdAbsenceVac")
                        .HasName("idAbsenceVac_idx");

                    b.HasIndex("IdUserVac")
                        .HasName("idUserVac_idx");

                    b.ToTable("vacation");
                });

            modelBuilder.Entity("Przychodnia.API.Workschedule", b =>
                {
                    b.Property<int>("IdWorkSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idWorkSchedule")
                        .HasColumnType("int(11)");

                    b.Property<sbyte?>("Current")
                        .HasColumnType("tinyint(4)");

                    b.Property<int?>("IdUser")
                        .HasColumnName("idUser")
                        .HasColumnType("int(11)");

                    b.Property<int?>("WeekNumber")
                        .HasColumnType("int(11)");

                    b.HasKey("IdWorkSchedule")
                        .HasName("PRIMARY");

                    b.HasIndex("IdUser")
                        .HasName("idUser_idx");

                    b.ToTable("workschedule");
                });

            modelBuilder.Entity("Przychodnia.API.Day", b =>
                {
                    b.HasOne("Przychodnia.API.Workschedule", "IdWsNavigation")
                        .WithMany("Day")
                        .HasForeignKey("IdWs")
                        .HasConstraintName("idWS")
                        .IsRequired();
                });

            modelBuilder.Entity("Przychodnia.API.Leftvacationdays", b =>
                {
                    b.HasOne("Przychodnia.API.Absence", "IdAbsenceNavigation")
                        .WithMany("Leftvacationdays")
                        .HasForeignKey("IdAbsence")
                        .HasConstraintName("isAbsence");

                    b.HasOne("Przychodnia.API.User", "IdUserNavigation")
                        .WithMany("Leftvacationdays")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("idUser");
                });

            modelBuilder.Entity("Przychodnia.API.User", b =>
                {
                    b.HasOne("Przychodnia.API.Employment", "IdEmplNavigation")
                        .WithMany("User")
                        .HasForeignKey("IdEmpl")
                        .HasConstraintName("idEmpl")
                        .IsRequired();

                    b.HasOne("Przychodnia.API.Role", "IdRoleNavigation")
                        .WithMany("User")
                        .HasForeignKey("IdRole")
                        .HasConstraintName("idRole")
                        .IsRequired();
                });

            modelBuilder.Entity("Przychodnia.API.Vacation", b =>
                {
                    b.HasOne("Przychodnia.API.Absence", "IdAbsenceVacNavigation")
                        .WithMany("Vacation")
                        .HasForeignKey("IdAbsenceVac")
                        .HasConstraintName("idAbsenceVac");

                    b.HasOne("Przychodnia.API.User", "IdUserVacNavigation")
                        .WithMany("Vacation")
                        .HasForeignKey("IdUserVac")
                        .HasConstraintName("idUserVac");
                });

            modelBuilder.Entity("Przychodnia.API.Workschedule", b =>
                {
                    b.HasOne("Przychodnia.API.User", "IdUserNavigation")
                        .WithMany("Workschedule")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("idUserWS");
                });
#pragma warning restore 612, 618
        }
    }
}
